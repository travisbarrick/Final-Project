),
selected="Infections"
,
multiple=FALSE),
selectInput("State", "Select States",
choices=c("AK"	,"AL"	,"AR"	,"AZ"	,"CA"	,"CO"	,"CT"	,"DC"	,"DE"	,"FL"	,"GA"	,"HI"	,"IA"	,"ID"	,"IL"	,"IN"	,"KS"	,"KY"	,"LA"	,"MA"	,"MD"	,"ME"	,"MI"	,"MN"	,"MO"	,"MS"	,"MT"	,"NC"	,"ND"	,"NE"	,"NH"	,"NJ"	,"NM"	,"NV"	,"NY"	,"OH"	,"OK"	,"OR"	,"PA"	,"RI"	,"SC"	,"SD"	,"TN"	,"TX"	,"UT"	,"VA"	,"VT"	,"WA"	,"WI"	,"WV"	,"WY"
),
selected=c("AK"	,"AL"	,"AR"	,"AZ"	,"CA"	,"CO"	,"CT"	,"DC"	,"DE"	,"FL"	,"GA"	,"HI"	,"IA"	,"ID"	,"IL"	,"IN"	,"KS"	,"KY"	,"LA"	,"MA"	,"MD"	,"ME"	,"MI"	,"MN"	,"MO"	,"MS"	,"MT"	,"NC"	,"ND"	,"NE"	,"NH"	,"NJ"	,"NM"	,"NV"	,"NY"	,"OH"	,"OK"	,"OR"	,"PA"	,"RI"	,"SC"	,"SD"	,"TN"	,"TX"	,"UT"	,"VA"	,"VT"	,"WA"	,"WI"	,"WV"	,"WY"
),
multiple=TRUE)
,width=3
),
mainPanel(
plotlyOutput("plot",width="100%")
)
)
)
server <- function(input, output,session) {
output$plot <- renderPlotly({
m<-Analysis_Dataset%>%
filter(Category==input$Category,ProviderState==input$State)%>%
group_by(Category,ProviderState) %>%
summarise(avg_insurance = paste("$",prettyNum(mean(AverageCoveredCharges),big.mark=",",scientific=FALSE), sep=""),
avg_medicare = paste("$",prettyNum(mean(AverageMedicarePayments),big.mark=",",scientific=FALSE), sep="") ,
avg_patient_owed = paste("$",prettyNum(mean(AverageTotalPayments-AverageMedicarePayments),big.mark=",",scientific=FALSE), sep="") )
p <- plot_ly(m, x = ~avg_insurance, y = ~avg_medicare,
z = ~avg_patient_owed,hoverinfo = 'text',text=~paste('Category: ',Category,'</br> State: ',ProviderState ,'</br> Average Insurance Cost: ',avg_insurance,'</br> Average Medicare Coverage: ',avg_medicare,'</br> Average Patient Owed: ',avg_patient_owed),color = ~Category
)%>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Average Insurance'),
yaxis = list(title = 'Average Medicare'),
zaxis = list(title = 'Average Patient Owed')))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("Category", "Select Category",
choices=c("Ears,Nose,Throat",	"Endocrine",	"Gastrointestinal",	"Heart",	"Infections",	"Lung",	"Nerve",	"Orthopedic",	"Other",	"Poisoning",	"Psychiatric",	"Renal",	"Skin",	"Vascular"
),
selected="Infections"
,
multiple=FALSE),
selectInput("State", "Select States (To deselect state, click and delete)",
choices=c("AK"	,"AL"	,"AR"	,"AZ"	,"CA"	,"CO"	,"CT"	,"DC"	,"DE"	,"FL"	,"GA"	,"HI"	,"IA"	,"ID"	,"IL"	,"IN"	,"KS"	,"KY"	,"LA"	,"MA"	,"MD"	,"ME"	,"MI"	,"MN"	,"MO"	,"MS"	,"MT"	,"NC"	,"ND"	,"NE"	,"NH"	,"NJ"	,"NM"	,"NV"	,"NY"	,"OH"	,"OK"	,"OR"	,"PA"	,"RI"	,"SC"	,"SD"	,"TN"	,"TX"	,"UT"	,"VA"	,"VT"	,"WA"	,"WI"	,"WV"	,"WY"
),
selected=c("AK"	,"AL"	,"AR"	,"AZ"	,"CA"	,"CO"	,"CT"	,"DC"	,"DE"	,"FL"	,"GA"	,"HI"	,"IA"	,"ID"	,"IL"	,"IN"	,"KS"	,"KY"	,"LA"	,"MA"	,"MD"	,"ME"	,"MI"	,"MN"	,"MO"	,"MS"	,"MT"	,"NC"	,"ND"	,"NE"	,"NH"	,"NJ"	,"NM"	,"NV"	,"NY"	,"OH"	,"OK"	,"OR"	,"PA"	,"RI"	,"SC"	,"SD"	,"TN"	,"TX"	,"UT"	,"VA"	,"VT"	,"WA"	,"WI"	,"WV"	,"WY"
),
multiple=TRUE)
,width=3
),
mainPanel(
plotlyOutput("plot",width="100%")
)
)
)
server <- function(input, output,session) {
output$plot <- renderPlotly({
m<-Analysis_Dataset%>%
filter(Category==input$Category,ProviderState==input$State)%>%
group_by(Category,ProviderState) %>%
summarise(avg_insurance = paste("$",prettyNum(mean(AverageCoveredCharges),big.mark=",",scientific=FALSE), sep=""),
avg_medicare = paste("$",prettyNum(mean(AverageMedicarePayments),big.mark=",",scientific=FALSE), sep="") ,
avg_patient_owed = paste("$",prettyNum(mean(AverageTotalPayments-AverageMedicarePayments),big.mark=",",scientific=FALSE), sep="") )
p <- plot_ly(m, x = ~avg_insurance, y = ~avg_medicare,
z = ~avg_patient_owed,hoverinfo = 'text',text=~paste('Category: ',Category,'</br> State: ',ProviderState ,'</br> Average Insurance Cost: ',avg_insurance,'</br> Average Medicare Coverage: ',avg_medicare,'</br> Average Patient Owed: ',avg_patient_owed),color = ~Category
)%>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Average Insurance'),
yaxis = list(title = 'Average Medicare'),
zaxis = list(title = 'Average Patient Owed')))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("Category", "Select Category",
choices=c("Ears,Nose,Throat",	"Endocrine",	"Gastrointestinal",	"Heart",	"Infections",	"Lung",	"Nerve",	"Orthopedic",	"Other",	"Poisoning",	"Psychiatric",	"Renal",	"Skin",	"Vascular"
),
selected="Infections"
,
multiple=FALSE),
selectInput("State", "Select States,tag$b(To deselect state, click and delete)",
choices=c("AK"	,"AL"	,"AR"	,"AZ"	,"CA"	,"CO"	,"CT"	,"DC"	,"DE"	,"FL"	,"GA"	,"HI"	,"IA"	,"ID"	,"IL"	,"IN"	,"KS"	,"KY"	,"LA"	,"MA"	,"MD"	,"ME"	,"MI"	,"MN"	,"MO"	,"MS"	,"MT"	,"NC"	,"ND"	,"NE"	,"NH"	,"NJ"	,"NM"	,"NV"	,"NY"	,"OH"	,"OK"	,"OR"	,"PA"	,"RI"	,"SC"	,"SD"	,"TN"	,"TX"	,"UT"	,"VA"	,"VT"	,"WA"	,"WI"	,"WV"	,"WY"
),
selected=c("AK"	,"AL"	,"AR"	,"AZ"	,"CA"	,"CO"	,"CT"	,"DC"	,"DE"	,"FL"	,"GA"	,"HI"	,"IA"	,"ID"	,"IL"	,"IN"	,"KS"	,"KY"	,"LA"	,"MA"	,"MD"	,"ME"	,"MI"	,"MN"	,"MO"	,"MS"	,"MT"	,"NC"	,"ND"	,"NE"	,"NH"	,"NJ"	,"NM"	,"NV"	,"NY"	,"OH"	,"OK"	,"OR"	,"PA"	,"RI"	,"SC"	,"SD"	,"TN"	,"TX"	,"UT"	,"VA"	,"VT"	,"WA"	,"WI"	,"WV"	,"WY"
),
multiple=TRUE)
,width=3
),
mainPanel(
plotlyOutput("plot",width="100%")
)
)
)
server <- function(input, output,session) {
output$plot <- renderPlotly({
m<-Analysis_Dataset%>%
filter(Category==input$Category,ProviderState==input$State)%>%
group_by(Category,ProviderState) %>%
summarise(avg_insurance = paste("$",prettyNum(mean(AverageCoveredCharges),big.mark=",",scientific=FALSE), sep=""),
avg_medicare = paste("$",prettyNum(mean(AverageMedicarePayments),big.mark=",",scientific=FALSE), sep="") ,
avg_patient_owed = paste("$",prettyNum(mean(AverageTotalPayments-AverageMedicarePayments),big.mark=",",scientific=FALSE), sep="") )
p <- plot_ly(m, x = ~avg_insurance, y = ~avg_medicare,
z = ~avg_patient_owed,hoverinfo = 'text',text=~paste('Category: ',Category,'</br> State: ',ProviderState ,'</br> Average Insurance Cost: ',avg_insurance,'</br> Average Medicare Coverage: ',avg_medicare,'</br> Average Patient Owed: ',avg_patient_owed),color = ~Category
)%>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Average Insurance'),
yaxis = list(title = 'Average Medicare'),
zaxis = list(title = 'Average Patient Owed')))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("Category", "Select Category",
choices=c("Ears,Nose,Throat",	"Endocrine",	"Gastrointestinal",	"Heart",	"Infections",	"Lung",	"Nerve",	"Orthopedic",	"Other",	"Poisoning",	"Psychiatric",	"Renal",	"Skin",	"Vascular"
),
selected="Infections"
,
multiple=FALSE),
selectInput("State", "Select States\n(To deselect state, click and delete)",
choices=c("AK"	,"AL"	,"AR"	,"AZ"	,"CA"	,"CO"	,"CT"	,"DC"	,"DE"	,"FL"	,"GA"	,"HI"	,"IA"	,"ID"	,"IL"	,"IN"	,"KS"	,"KY"	,"LA"	,"MA"	,"MD"	,"ME"	,"MI"	,"MN"	,"MO"	,"MS"	,"MT"	,"NC"	,"ND"	,"NE"	,"NH"	,"NJ"	,"NM"	,"NV"	,"NY"	,"OH"	,"OK"	,"OR"	,"PA"	,"RI"	,"SC"	,"SD"	,"TN"	,"TX"	,"UT"	,"VA"	,"VT"	,"WA"	,"WI"	,"WV"	,"WY"
),
selected=c("AK"	,"AL"	,"AR"	,"AZ"	,"CA"	,"CO"	,"CT"	,"DC"	,"DE"	,"FL"	,"GA"	,"HI"	,"IA"	,"ID"	,"IL"	,"IN"	,"KS"	,"KY"	,"LA"	,"MA"	,"MD"	,"ME"	,"MI"	,"MN"	,"MO"	,"MS"	,"MT"	,"NC"	,"ND"	,"NE"	,"NH"	,"NJ"	,"NM"	,"NV"	,"NY"	,"OH"	,"OK"	,"OR"	,"PA"	,"RI"	,"SC"	,"SD"	,"TN"	,"TX"	,"UT"	,"VA"	,"VT"	,"WA"	,"WI"	,"WV"	,"WY"
),
multiple=TRUE)
,width=3
),
mainPanel(
plotlyOutput("plot",width="100%")
)
)
)
server <- function(input, output,session) {
output$plot <- renderPlotly({
m<-Analysis_Dataset%>%
filter(Category==input$Category,ProviderState==input$State)%>%
group_by(Category,ProviderState) %>%
summarise(avg_insurance = paste("$",prettyNum(mean(AverageCoveredCharges),big.mark=",",scientific=FALSE), sep=""),
avg_medicare = paste("$",prettyNum(mean(AverageMedicarePayments),big.mark=",",scientific=FALSE), sep="") ,
avg_patient_owed = paste("$",prettyNum(mean(AverageTotalPayments-AverageMedicarePayments),big.mark=",",scientific=FALSE), sep="") )
p <- plot_ly(m, x = ~avg_insurance, y = ~avg_medicare,
z = ~avg_patient_owed,hoverinfo = 'text',text=~paste('Category: ',Category,'</br> State: ',ProviderState ,'</br> Average Insurance Cost: ',avg_insurance,'</br> Average Medicare Coverage: ',avg_medicare,'</br> Average Patient Owed: ',avg_patient_owed),color = ~Category
)%>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Average Insurance'),
yaxis = list(title = 'Average Medicare'),
zaxis = list(title = 'Average Patient Owed')))
})
}
shinyApp(ui = ui, server = server)
Analysis_Dataset<-Analysis_Dataset%>%
select("Category","ProviderState","AverageCoveredCharges", "AverageMedicarePayments","AverageTotalPayments","Procedure","TotalDischarges","ProviderName")
AverageCategory<-AverageCategory%>%
select("Category","Rating","ProviderName","ProviderStreetAddress","ProviderCity","AverageCost","State")
Analysis_Dataset<-Analysis_Dataset%>%
select(Category,ProviderState,AverageCoveredCharges, AverageMedicarePayments,AverageTotalPayments,Procedure,TotalDischarges,ProviderName)
AverageCategory<-AverageCategory%>%
select(Category,Rating,ProviderName,ProviderStreetAddress,ProviderCity,AverageCost,State)
AverageCategory<-AverageCategory%>%
select(Category,Rating,ProviderName,ProviderStreetAddress,ProviderCity,AverageCost,Name)
View(AverageCategory)
AverageCategory<-AverageCategory%>%
select(Category,Rating,ProviderName,ProviderStreetAddress,ProviderCity,AverageCost,Name,ProviderState,latitude,longitude)
write.csv(mapstates, file = "mapstates3.csv",row.names=FALSE)
write.csv(mapstates2, file = "mapstates4.csv",row.names=FALSE)
write.csv(Analysis_Dataset, file = "Analysis_Dataset2.csv",row.names=FALSE)
write.csv(AverageCategory, file = "AverageCategory.csv",row.names=FALSE)
mapstates<-mapstates%>%
select(Category,ProviderState,Mean_Cost_Percentage_Difference_to_Iowa,lat,long)
mapstates2<-mapstates2%>%
select(Category,ProviderState,Mean_Cost_Percentage_Difference_to_Iowa,lat,long)
write.csv(mapstates, file = "mapstates3.csv",row.names=FALSE)
write.csv(mapstates2, file = "mapstates4.csv",row.names=FALSE)
Analysis_Dataset<-Analysis_Dataset%>%
select(Category,ProviderState,AverageCoveredCharges, AverageMedicarePayments,AverageTotalPayments,Procedure,TotalDischarges,ProviderName,NumberofPatients)
ui <- fluidPage(
mainPanel(
HTML("Hover over points for information"),
selectInput("State", "Select States",
choices=c("AK"	,"AL"	,"AR"	,"AZ"	,"CA"	,"CO"	,"CT"	,"DC"	,"DE"	,"FL"	,"GA"	,"HI"	,"IA"	,"ID"	,"IL"	,"IN"	,"KS"	,"KY"	,"LA"	,"MA"	,"MD"	,"ME"	,"MI"	,"MN"	,"MO"	,"MS"	,"MT"	,"NC"	,"ND"	,"NE"	,"NH"	,"NJ"	,"NM"	,"NV"	,"NY"	,"OH"	,"OK"	,"OR"	,"PA"	,"RI"	,"SC"	,"SD"	,"TN"	,"TX"	,"UT"	,"VA"	,"VT"	,"WA"	,"WI"	,"WV"	,"WY"
),
selected="IA",
multiple=FALSE),
selectInput("Category", "Select Category",
choices=c("Ears,Nose,Throat",	"Endocrine",	"Gastrointestinal",	"Heart",	"Infections",	"Lung",	"Nerve",	"Orthopedic",	"Other",	"Poisoning",	"Psychiatric",	"Renal",	"Skin",	"Vascular"
),
selected="Heart",
multiple=TRUE
),
# this is an extra div used ONLY to create positioned ancestor for tooltip
# we don't change its position
plotlyOutput("scatterplot"),
width = 12
)
)
server <- function(input, output,session) {
output$scatterplot <- renderPlotly({
m<-Analysis_Dataset %>%
filter(ProviderState==input$State,Category==input$Category)%>%
group_by(ProviderState,ProviderName,Category,Procedure) %>%
summarize(NumberofPatients = sum(TotalDischarges))
gg<-ggplotly(ggplot(m,aes(Procedure,NumberofPatients,label=ProviderName))+
geom_point(aes(color=Category)) +
ylab("# of Patients")+
coord_flip()+
guides(color=FALSE))
gg
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
#titlePanel("Healthcare Expenses Compared to Iowa by Category"),
sidebarLayout(
sidebarPanel(
radioButtons("Category", "Select Category",
choices=c("Ears,Nose,Throat",	"Endocrine",	"Gastrointestinal",	"Heart",	"Infections",	"Lung",	"Nerve",	"Orthopedic",	"Other",	"Poisoning",	"Psychiatric",	"Renal",	"Skin",	"Vascular"
),
selected="Heart"
),width=3
),
mainPanel(tabsetPanel(
tabPanel("% Difference to Iowa",
plotlyOutput("plot2",width=900,height=450
)),
tabPanel("Cost of Living Adjusted % Difference to Iowa",
plotlyOutput("plot",width=900,height=450
)))
)
)
)
server <- function(input, output,session) {
output$plot <- renderPlotly({
states<-map_data("state")
catreact<-reactive({input$Category})
mapstates %>%
filter(Category==catreact())%>%
group_by(Category,ProviderState,Mean_Cost_Percentage_Difference_to_Iowa)%>%
rename(Compared.to.Iowa=Mean_Cost_Percentage_Difference_to_Iowa)%>%
ggplot(aes(x = long, y = lat,group=group)) +
geom_path()+
geom_polygon(aes(group = group, fill=Compared.to.Iowa))+
expand_limits(x=states$long, y=states$lat)+
scale_fill_gradient2(low="dark green",mid="white",high="dark red",name="Cost of Living \n% Compared to Iowa")+
theme(plot.title = element_text(hjust = -0.7))+
ggthemes::theme_map()
})
output$plot2 <- renderPlotly({
catreact<-reactive({input$Category})
mapstates2 %>%
filter(Category==catreact())%>%
group_by(Category,ProviderState,Mean_Cost_Percentage_Difference_to_Iowa)%>%
rename(Compared.to.Iowa=Mean_Cost_Percentage_Difference_to_Iowa)%>%
ggplot(aes(x = long, y = lat,group=group)) +
geom_path()+
geom_polygon(aes(group = group, fill=Compared.to.Iowa))+
expand_limits(x=states$long, y=states$lat)+
scale_fill_gradient2(low="dark green",mid="white",high="dark red",name="% Compared to Iowa")+
theme(plot.title = element_text(hjust = -0.7))+
ggthemes::theme_map()
})
}
shinyApp(ui = ui, server = server)
#Libraries
library(readr)
if (!require(shiny)) install.packages("shiny")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(dplyr)) install.packages("dplyr")
if (!require(plotly)) install.packages("plotly")
if (!require(leaflet)) install.packages("leaflet")
if (!require(htmltools)) install.packages("htmltools")
if (!require(DT)) install.packages("DT")
if (!require(stringr)) install.packages("stringr")
if (!require(ggmap)) install.packages("ggmap")
if (!require(devtools)) install.packages("devtools")
library(shiny)
library(ggplot2)
library(dplyr)
library(leaflet)
library(htmltools)
library(DT)
library(stringr)
library(ggmap)
library(devtools)
devtools::install_github("ShinyRatingInput", "stefanwilhelm")
library(ShinyRatingInput)
##### Data Import #####
healthcare <- read_csv("Healthcare_Data.csv")
zip<-read_csv("zipcode.csv")
population <- read_csv("2010_Census_Population.csv")
DRG_categories <- read_csv("Diagnosis_Category2.csv")
COLA <- read_csv("COLA by State.csv")
statesplus <- read.csv("http://www.hofroe.net/data/statesplus.csv")
general_info <- read_csv("Hospital_General_Information.csv")[c(1,9:11,13)]
general_info$`Provider ID` <- substr(general_info$`Provider ID`,regexpr("[^0]",general_info$`Provider ID`),nchar(general_info$`Provider ID`)) ##removes leading zero's from Provider ID so merge works
#### Merge datatsets together ####
Analysis_Dataset <- merge(healthcare, zip, by.x = "ProviderZipCode", by.y = "zip")
Analysis_Dataset <- merge(Analysis_Dataset, population, by.x = "ProviderZipCode", by.y = "Zip_Code")
Analysis_Dataset <- merge(Analysis_Dataset, DRG_categories, by.x = "DRGDefinition", by.y = "DRGDefinition")
Analysis_Dataset <- merge(Analysis_Dataset, general_info, by.x = "ProviderId", by.y = "Provider ID")
Analysis_Dataset <- merge(Analysis_Dataset, COLA, by.x = "ProviderState", by.y = "State")
### Create new variables  ###
Analysis_Dataset$TreatmentCost = Analysis_Dataset$AverageTotalPayments + Analysis_Dataset$AverageCoveredCharges
Analysis_Dataset$Is_Iowa <- Analysis_Dataset$ProviderState ==  "IA"
#### Adjust new variables ####
Analysis_Dataset$Category<-as.factor(Analysis_Dataset$Category)
Analysis_Dataset <- Analysis_Dataset %>% rename(Rating = `Hospital overall rating`)
Analysis_Dataset$Rating <- as.numeric(Analysis_Dataset$Rating)
#### Graph 1 uses Analysis_Dataset ####
#### Graph 2 #####
AverageCategory<-Analysis_Dataset %>% group_by(Category,ProviderState,Name,ProviderName,ProviderStreetAddress,ProviderCity,latitude,longitude,Rating) %>%
summarise(AverageCost=mean(TreatmentCost)) %>%
arrange(AverageCost)
AverageCategory$Name<-str_to_title(AverageCategory$Name)
Analysis_Dataset$ProviderName<-str_to_title(Analysis_Dataset$ProviderName)
Analysis_Dataset$ProviderCity<-str_to_title(Analysis_Dataset$ProviderCity)
##### Graph 3 (both tabs) #####
### Tab 1
COLA_Avg_Cost_by_Category  <-
Analysis_Dataset %>% group_by(Category, ProviderState, Name, Index, Rank) %>%
summarise(
avg_cost = mean(TreatmentCost))
COLA_Avg_Cost_by_Category$COLA_avg_cost <- COLA_Avg_Cost_by_Category$avg_cost * COLA_Avg_Cost_by_Category$Index / 100
IA_Avg_Cost_by_Category <-
COLA_Avg_Cost_by_Category %>%
filter(ProviderState == "IA") %>% ungroup() %>%
select(Category,ProviderState,avg_cost)
colnames(IA_Avg_Cost_by_Category)[1] <- "IACompCategory"
colnames(IA_Avg_Cost_by_Category)[2] <- "IACompState"
colnames(IA_Avg_Cost_by_Category)[3] <- "IACompCost"
COLA_Mid_Point_Analysis_Table <- merge(IA_Avg_Cost_by_Category, COLA_Avg_Cost_by_Category, by.x = "IACompCategory", by.y = "Category")
COLA_Mid_Point_Analysis_Table$Mean_Cost_Difference_to_Iowa <- COLA_Mid_Point_Analysis_Table$COLA_avg_cost - COLA_Mid_Point_Analysis_Table$IACompCost
COLA_Mid_Point_Analysis_Table$Mean_Cost_Percentage_Difference_to_Iowa <- ((COLA_Mid_Point_Analysis_Table$COLA_avg_cost - COLA_Mid_Point_Analysis_Table$IACompCost)/COLA_Mid_Point_Analysis_Table$IACompCost)*100
colnames(COLA_Mid_Point_Analysis_Table)[1] <- "Category"
colnames(COLA_Mid_Point_Analysis_Table)[2] <- "State"
states<-map_data("state")
mapstates<-merge(statesplus,COLA_Mid_Point_Analysis_Table,by.x ="region", by.y ="Name")
#### Tab 2
All_State_Midpoint_Table <- COLA_Avg_Cost_by_Category[c(1,2,6)]
Iowa_Midpoint_Table <- IA_Avg_Cost_by_Category
colnames(Iowa_Midpoint_Table)[3] <- "Iowa_Mean_Treatment_Cost"
colnames(Iowa_Midpoint_Table)[2] <- "State"
colnames(All_State_Midpoint_Table)[3] <- "Average_Treatment_Cost"
Mid_Point_Analysis_Table <- merge(All_State_Midpoint_Table, Iowa_Midpoint_Table, by.x = "Category", by.y = "IACompCategory")
Mid_Point_Analysis_Table$Mean_Cost_Difference_to_Iowa <- Mid_Point_Analysis_Table$Average_Treatment_Cost - Mid_Point_Analysis_Table$Iowa_Mean_Treatment_Cost
Mid_Point_Analysis_Table$Mean_Cost_Percentage_Difference_to_Iowa <- ((Mid_Point_Analysis_Table$Average_Treatment_Cost - Mid_Point_Analysis_Table$Iowa_Mean_Treatment_Cost)/Mid_Point_Analysis_Table$Iowa_Mean_Treatment_Cost) * 100
Mid_Point_Analysis_Table <-
Mid_Point_Analysis_Table %>%
select(Category,ProviderState,Mean_Cost_Difference_to_Iowa, Mean_Cost_Percentage_Difference_to_Iowa)
secondmap<-merge(Mid_Point_Analysis_Table,COLA[1:2],by.x="ProviderState",by.y="State")
mapstates2<-merge(statesplus,secondmap,by.x ="region", by.y ="Name")
#### Graph 4 uses Analysis_Dataset ####
#Optimize datasets by selecting only columns in charts
mapstates<-mapstates%>%
select(Category,ProviderState,Mean_Cost_Percentage_Difference_to_Iowa,lat,long,group)
mapstates2<-mapstates2%>%
select(Category,ProviderState,Mean_Cost_Percentage_Difference_to_Iowa,lat,long,group)
Analysis_Dataset<-Analysis_Dataset%>%
select(Category,ProviderState,AverageCoveredCharges, AverageMedicarePayments,AverageTotalPayments,Procedure,TotalDischarges,ProviderName)
AverageCategory<-AverageCategory%>%
select(Category,Rating,ProviderName,ProviderStreetAddress,ProviderCity,AverageCost,Name,ProviderState,latitude,longitude)
write.csv(mapstates, file = "mapstates3.csv",row.names=FALSE)
write.csv(mapstates2, file = "mapstates4.csv",row.names=FALSE)
ui <- fluidPage(
#titlePanel("Healthcare Expenses Compared to Iowa by Category"),
sidebarLayout(
sidebarPanel(
radioButtons("Category", "Select Category",
choices=c("Ears,Nose,Throat",	"Endocrine",	"Gastrointestinal",	"Heart",	"Infections",	"Lung",	"Nerve",	"Orthopedic",	"Other",	"Poisoning",	"Psychiatric",	"Renal",	"Skin",	"Vascular"
),
selected="Heart"
),width=3
),
mainPanel(tabsetPanel(
tabPanel("% Difference to Iowa",
plotlyOutput("plot2",width=900,height=450
)),
tabPanel("Cost of Living Adjusted % Difference to Iowa",
plotlyOutput("plot",width=900,height=450
)))
)
)
)
server <- function(input, output,session) {
output$plot <- renderPlotly({
states<-map_data("state")
catreact<-reactive({input$Category})
mapstates %>%
filter(Category==catreact())%>%
group_by(Category,ProviderState,Mean_Cost_Percentage_Difference_to_Iowa)%>%
rename(Compared.to.Iowa=Mean_Cost_Percentage_Difference_to_Iowa)%>%
ggplot(aes(x = long, y = lat,group=group)) +
geom_path()+
geom_polygon(aes(group = group, fill=Compared.to.Iowa))+
expand_limits(x=states$long, y=states$lat)+
scale_fill_gradient2(low="dark green",mid="white",high="dark red",name="Cost of Living \n% Compared to Iowa")+
theme(plot.title = element_text(hjust = -0.7))+
ggthemes::theme_map()
})
output$plot2 <- renderPlotly({
catreact<-reactive({input$Category})
mapstates2 %>%
filter(Category==catreact())%>%
group_by(Category,ProviderState,Mean_Cost_Percentage_Difference_to_Iowa)%>%
rename(Compared.to.Iowa=Mean_Cost_Percentage_Difference_to_Iowa)%>%
ggplot(aes(x = long, y = lat,group=group)) +
geom_path()+
geom_polygon(aes(group = group, fill=Compared.to.Iowa))+
expand_limits(x=states$long, y=states$lat)+
scale_fill_gradient2(low="dark green",mid="white",high="dark red",name="% Compared to Iowa")+
theme(plot.title = element_text(hjust = -0.7))+
ggthemes::theme_map()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
#titlePanel("Healthcare Expenses Compared to Iowa by Category"),
sidebarLayout(
sidebarPanel(
radioButtons("Category", "Select Category",
choices=c("Ears,Nose,Throat",	"Endocrine",	"Gastrointestinal",	"Heart",	"Infections",	"Lung",	"Nerve",	"Orthopedic",	"Other",	"Poisoning",	"Psychiatric",	"Renal",	"Skin",	"Vascular"
),
selected="Heart"
),width=3
),
mainPanel(tabsetPanel(
tabPanel("% Difference to Iowa",
plotlyOutput("plot2",width=900,height=450
)),
tabPanel("Cost of Living Adjusted % Difference to Iowa",
plotlyOutput("plot",width=900,height=450
)))
)
)
)
server <- function(input, output,session) {
output$plot <- renderPlotly({
states<-map_data("state")
catreact<-reactive({input$Category})
mapstates %>%
filter(Category==catreact())%>%
group_by(Category,ProviderState,Mean_Cost_Percentage_Difference_to_Iowa)%>%
rename(Compared.to.Iowa=Mean_Cost_Percentage_Difference_to_Iowa)%>%
ggplot(aes(x = long, y = lat,group=group)) +
geom_path()+
geom_polygon(aes(group = group, fill=Compared.to.Iowa))+
expand_limits(x=mapstates$long, y=mapstates$lat)+
scale_fill_gradient2(low="dark green",mid="white",high="dark red",name="Cost of Living \n% Compared to Iowa")+
theme(plot.title = element_text(hjust = -0.7))+
ggthemes::theme_map()
})
output$plot2 <- renderPlotly({
catreact<-reactive({input$Category})
mapstates2 %>%
filter(Category==catreact())%>%
group_by(Category,ProviderState,Mean_Cost_Percentage_Difference_to_Iowa)%>%
rename(Compared.to.Iowa=Mean_Cost_Percentage_Difference_to_Iowa)%>%
ggplot(aes(x = long, y = lat,group=group)) +
geom_path()+
geom_polygon(aes(group = group, fill=Compared.to.Iowa))+
expand_limits(x=mapstates2$long, y=mapstates2$lat)+
scale_fill_gradient2(low="dark green",mid="white",high="dark red",name="% Compared to Iowa")+
theme(plot.title = element_text(hjust = -0.7))+
ggthemes::theme_map()
})
}
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='travisbarrick',
token='C96B810755A73B4991CD319FCB111790',
secret='sib1cVzt97vyFAlYrudgILVr3tVSfULVqcvqffH2')
rsconnect::setAccountInfo(name='travisbarrick',
token='C96B810755A73B4991CD319FCB111790',
secret='sib1cVzt97vyFAlYrudgILVr3tVSfULVqcvqffH2')
deployApp()
library(rsconnect)
rsconnect::setAccountInfo(name='travisbarrick',
token='C96B810755A73B4991CD319FCB111790',
secret='sib1cVzt97vyFAlYrudgILVr3tVSfULVqcvqffH2')
deployApp()
rsconnect::setAccountInfo(name='travisbarrick',
token='E5BB09050B3270B807181F43C8EB02BE',
secret='zE1GVlEl/IGbaYKF/iwLWOg4SfJxWM5FZouU9Pp9')
deployApp()
rsconnect::setAccountInfo(name='travisbarrick',
token='E5BB09050B3270B807181F43C8EB02BE',
secret='zE1GVlEl/IGbaYKF/iwLWOg4SfJxWM5FZouU9Pp9')
rsconnect::deployApp('C:/Users/Travis/Desktop/Final Project/Published.Rmd')
rsconnect::deployApp('C:/Users/Travis/Desktop/Final Project/Published.Rmd')
rsconnect::deployApp('C:/Users/Travis/Desktop/Final Project')
rsconnect::deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
rsconnect::setAccountInfo(name='travisbarrick',
token='E5BB09050B3270B807181F43C8EB02BE',
secret='zE1GVlEl/IGbaYKF/iwLWOg4SfJxWM5FZouU9Pp9')
rsconnect::deployApp('C:/Users/Travis/Desktop/Final Project/Publish/Published.Rmd')
rsconnect::deployApp('C:/Users/Travis/Desktop/Final Project/Publish/Published.Rmd')
deployApp()
rsconnect::setAccountInfo(name='travisbarrick',
token='E5BB09050B3270B807181F43C8EB02BE',
secret='zE1GVlEl/IGbaYKF/iwLWOg4SfJxWM5FZouU9Pp9')
rsconnect::deployApp('C:/Users/Travis/Desktop/Final Project/Publish/Published.Rmd')
deployApp()
rsconnect::deployApp('C:/Users/Travis/Desktop/Final Project/Publish/Published.Rmd')
