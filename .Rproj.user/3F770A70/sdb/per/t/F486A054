{
    "collab_server" : "",
    "contents" : "\n\n---\ntitle: \"Healthcare Costs\"\nauthor: \"Jake Johnson, Travis Barrick, Erica Fitzgerald, Carrie Baggett\"\ndate: \"November 13, 2016\"\noutput: \n  ioslides_presentation:\n    fig_width: 7\n    fig_height: 9\n    widescreen: true\n    smaller: true\n\nruntime: shiny\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE,warning=FALSE)\n```\n\n```{r, echo=FALSE,message=FALSE, fig.height=5}\n#Libraries\nlibrary(readr)\nif (!require(shiny)) install.packages(\"shiny\")\nif (!require(ggplot2)) install.packages(\"ggplot2\")\nif (!require(dplyr)) install.packages(\"dplyr\")\nif (!require(plotly)) install.packages(\"plotly\")\nif (!require(leaflet)) install.packages(\"leaflet\")\nif (!require(htmltools)) install.packages(\"htmltools\")\nif (!require(DT)) install.packages(\"DT\")\nif (!require(stringr)) install.packages(\"stringr\")\nif (!require(ggmap)) install.packages(\"ggmap\")\nif (!require(devtools)) install.packages(\"devtools\")\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(leaflet)\nlibrary(htmltools)\nlibrary(DT)\nlibrary(stringr)\nlibrary(ggmap)\nlibrary(devtools)\ndevtools::install_github(\"ShinyRatingInput\", \"stefanwilhelm\")\nlibrary(ShinyRatingInput)\n\n##### Data Import #####\nhealthcare <- read_csv(\"Healthcare_Data.csv\")\nzip<-read_csv(\"zipcode.csv\")\npopulation <- read_csv(\"2010_Census_Population.csv\")\nDRG_categories <- read_csv(\"Diagnosis_Category2.csv\")\nCOLA <- read_csv(\"COLA by State.csv\")\nstatesplus <- read.csv(\"http://www.hofroe.net/data/statesplus.csv\")\ngeneral_info <- read_csv(\"Hospital_General_Information.csv\")[c(1,9:11,13)]\ngeneral_info$`Provider ID` <- substr(general_info$`Provider ID`,regexpr(\"[^0]\",general_info$`Provider ID`),nchar(general_info$`Provider ID`)) ##removes leading zero's from Provider ID so merge works\n\n#### Merge datatsets together ####\nAnalysis_Dataset <- merge(healthcare, zip, by.x = \"ProviderZipCode\", by.y = \"zip\")\nAnalysis_Dataset <- merge(Analysis_Dataset, population, by.x = \"ProviderZipCode\", by.y = \"Zip_Code\")\nAnalysis_Dataset <- merge(Analysis_Dataset, DRG_categories, by.x = \"DRGDefinition\", by.y = \"DRGDefinition\")\nAnalysis_Dataset <- merge(Analysis_Dataset, general_info, by.x = \"ProviderId\", by.y = \"Provider ID\")\nAnalysis_Dataset <- merge(Analysis_Dataset, COLA, by.x = \"ProviderState\", by.y = \"State\")\n\n### Create new variables  ###\nAnalysis_Dataset$TreatmentCost = Analysis_Dataset$AverageTotalPayments + Analysis_Dataset$AverageCoveredCharges\nAnalysis_Dataset$Is_Iowa <- Analysis_Dataset$ProviderState ==  \"IA\"\n\n#### Adjust new variables ####\nAnalysis_Dataset$Category<-as.factor(Analysis_Dataset$Category)\nAnalysis_Dataset <- Analysis_Dataset %>% rename(Rating = `Hospital overall rating`) \nAnalysis_Dataset$Rating <- as.numeric(Analysis_Dataset$Rating) \n\n\n#### Graph 1 uses Analysis_Dataset ####\n\n#### Graph 2 #####\nAverageCategory<-Analysis_Dataset %>% group_by(Category,ProviderState,Name,ProviderName,ProviderStreetAddress,ProviderCity,latitude,longitude,Rating) %>% \n  summarise(AverageCost=mean(TreatmentCost)) %>% \n  arrange(AverageCost)\n\nAverageCategory$Name<-str_to_title(AverageCategory$Name)\nAnalysis_Dataset$ProviderName<-str_to_title(Analysis_Dataset$ProviderName)\nAnalysis_Dataset$ProviderCity<-str_to_title(Analysis_Dataset$ProviderCity)\n \n##### Graph 3 (both tabs) #####\n### Tab 1\nCOLA_Avg_Cost_by_Category  <- \n  Analysis_Dataset %>% group_by(Category, ProviderState, Name, Index, Rank) %>%\n  summarise(\n    avg_cost = mean(TreatmentCost)) \n\nCOLA_Avg_Cost_by_Category$COLA_avg_cost <- COLA_Avg_Cost_by_Category$avg_cost * COLA_Avg_Cost_by_Category$Index / 100\n\nIA_Avg_Cost_by_Category <-\n  COLA_Avg_Cost_by_Category %>% \n  filter(ProviderState == \"IA\") %>% ungroup() %>%\n  select(Category,ProviderState,avg_cost)\n\ncolnames(IA_Avg_Cost_by_Category)[1] <- \"IACompCategory\"\ncolnames(IA_Avg_Cost_by_Category)[2] <- \"IACompState\"\ncolnames(IA_Avg_Cost_by_Category)[3] <- \"IACompCost\"\n\n\nCOLA_Mid_Point_Analysis_Table <- merge(IA_Avg_Cost_by_Category, COLA_Avg_Cost_by_Category, by.x = \"IACompCategory\", by.y = \"Category\")\nCOLA_Mid_Point_Analysis_Table$Mean_Cost_Difference_to_Iowa <- COLA_Mid_Point_Analysis_Table$COLA_avg_cost - COLA_Mid_Point_Analysis_Table$IACompCost   \nCOLA_Mid_Point_Analysis_Table$Mean_Cost_Percentage_Difference_to_Iowa <- ((COLA_Mid_Point_Analysis_Table$COLA_avg_cost - COLA_Mid_Point_Analysis_Table$IACompCost)/COLA_Mid_Point_Analysis_Table$IACompCost)*100\n\ncolnames(COLA_Mid_Point_Analysis_Table)[1] <- \"Category\"\ncolnames(COLA_Mid_Point_Analysis_Table)[2] <- \"State\"\n\nstates<-map_data(\"state\")\nmapstates<-merge(statesplus,COLA_Mid_Point_Analysis_Table,by.x =\"region\", by.y =\"Name\")\n\n#### Tab 2\nAll_State_Midpoint_Table <- COLA_Avg_Cost_by_Category[c(1,2,6)]\nIowa_Midpoint_Table <- IA_Avg_Cost_by_Category\n\ncolnames(Iowa_Midpoint_Table)[3] <- \"Iowa_Mean_Treatment_Cost\"\ncolnames(Iowa_Midpoint_Table)[2] <- \"State\"\ncolnames(All_State_Midpoint_Table)[3] <- \"Average_Treatment_Cost\"\n\nMid_Point_Analysis_Table <- merge(All_State_Midpoint_Table, Iowa_Midpoint_Table, by.x = \"Category\", by.y = \"IACompCategory\")\n\nMid_Point_Analysis_Table$Mean_Cost_Difference_to_Iowa <- Mid_Point_Analysis_Table$Average_Treatment_Cost - Mid_Point_Analysis_Table$Iowa_Mean_Treatment_Cost\n\nMid_Point_Analysis_Table$Mean_Cost_Percentage_Difference_to_Iowa <- ((Mid_Point_Analysis_Table$Average_Treatment_Cost - Mid_Point_Analysis_Table$Iowa_Mean_Treatment_Cost)/Mid_Point_Analysis_Table$Iowa_Mean_Treatment_Cost) * 100\n\n\nMid_Point_Analysis_Table <-\n  Mid_Point_Analysis_Table %>%\n  select(Category,ProviderState,Mean_Cost_Difference_to_Iowa, Mean_Cost_Percentage_Difference_to_Iowa)\n\n\nsecondmap<-merge(Mid_Point_Analysis_Table,COLA[1:2],by.x=\"ProviderState\",by.y=\"State\")\nmapstates2<-merge(statesplus,secondmap,by.x =\"region\", by.y =\"Name\")\n\n#### Graph 4 uses Analysis_Dataset ####\n\n#Optimize datasets by selecting only columns in charts\nmapstates<-mapstates%>%\n  select(Category,ProviderState,Mean_Cost_Percentage_Difference_to_Iowa,lat,long,group)\n  \nmapstates2<-mapstates2%>%\n  select(Category,ProviderState,Mean_Cost_Percentage_Difference_to_Iowa,lat,long,group)\n  \nAnalysis_Dataset<-Analysis_Dataset%>%\n  select(Category,ProviderState,AverageCoveredCharges, AverageMedicarePayments,AverageTotalPayments,Procedure,TotalDischarges,ProviderName)\n\nAverageCategory<-AverageCategory%>%\n  select(Category,Rating,ProviderName,ProviderStreetAddress,ProviderCity,AverageCost,Name,ProviderState,latitude,longitude)\n\n\n```\n##Cost of Healthcare\n-Bullet 1  \n-Bullet 2\n\n\n##Average Cost of Healthcare|By State\n\n```{r, echo=FALSE,message=FALSE,fig_width=13}\nui <- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"Category\", \"Select Category\", \n                  choices=c(\"Ears,Nose,Throat\",\t\"Endocrine\",\t\"Gastrointestinal\",\t\"Heart\",\t\"Infections\",\t\"Lung\",\t\"Nerve\",\t\"Orthopedic\",\t\"Other\",\t\"Poisoning\",\t\"Psychiatric\",\t\"Renal\",\t\"Skin\",\t\"Vascular\"\n                  ),\n                  selected=\"Infections\"\n                  ,\n                  multiple=FALSE), \n      selectInput(\"State\", \"Select States (To remove state, highlight and delete)\", \n                  choices=c(\"AK\"\t,\"AL\"\t,\"AR\"\t,\"AZ\"\t,\"CA\"\t,\"CO\"\t,\"CT\"\t,\"DC\"\t,\"DE\"\t,\"FL\"\t,\"GA\"\t,\"HI\"\t,\"IA\"\t,\"ID\"\t,\"IL\"\t,\"IN\"\t,\"KS\"\t,\"KY\"\t,\"LA\"\t,\"MA\"\t,\"MD\"\t,\"ME\"\t,\"MI\"\t,\"MN\"\t,\"MO\"\t,\"MS\"\t,\"MT\"\t,\"NC\"\t,\"ND\"\t,\"NE\"\t,\"NH\"\t,\"NJ\"\t,\"NM\"\t,\"NV\"\t,\"NY\"\t,\"OH\"\t,\"OK\"\t,\"OR\"\t,\"PA\"\t,\"RI\"\t,\"SC\"\t,\"SD\"\t,\"TN\"\t,\"TX\"\t,\"UT\"\t,\"VA\"\t,\"VT\"\t,\"WA\"\t,\"WI\"\t,\"WV\"\t,\"WY\"\n                  ),\n                  selected=c(\"AK\"\t,\"AL\"\t,\"AR\"\t,\"AZ\"\t,\"CA\"\t,\"CO\"\t,\"CT\"\t,\"DC\"\t,\"DE\"\t,\"FL\"\t,\"GA\"\t,\"HI\"\t,\"IA\"\t,\"ID\"\t,\"IL\"\t,\"IN\"\t,\"KS\"\t,\"KY\"\t,\"LA\"\t,\"MA\"\t,\"MD\"\t,\"ME\"\t,\"MI\"\t,\"MN\"\t,\"MO\"\t,\"MS\"\t,\"MT\"\t,\"NC\"\t,\"ND\"\t,\"NE\"\t,\"NH\"\t,\"NJ\"\t,\"NM\"\t,\"NV\"\t,\"NY\"\t,\"OH\"\t,\"OK\"\t,\"OR\"\t,\"PA\"\t,\"RI\"\t,\"SC\"\t,\"SD\"\t,\"TN\"\t,\"TX\"\t,\"UT\"\t,\"VA\"\t,\"VT\"\t,\"WA\"\t,\"WI\"\t,\"WV\"\t,\"WY\"\n                  ), \n                  multiple=TRUE)\n      ,width=3\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\",width=\"100%\")\n    )\n  )\n)\n\nserver <- function(input, output,session) {\n  output$plot <- renderPlotly({\n    m<-Analysis_Dataset%>%\n      filter(Category==input$Category,ProviderState==input$State)%>%\n      group_by(Category,ProviderState) %>% \n      summarise(avg_insurance = paste(\"$\",prettyNum(mean(AverageCoveredCharges),big.mark=\",\",scientific=FALSE), sep=\"\"),\n                avg_medicare = paste(\"$\",prettyNum(mean(AverageMedicarePayments),big.mark=\",\",scientific=FALSE), sep=\"\") ,\n                avg_patient_owed = paste(\"$\",prettyNum(mean(AverageTotalPayments-AverageMedicarePayments),big.mark=\",\",scientific=FALSE), sep=\"\") )\n    \n    p <- plot_ly(m, x = ~avg_insurance, y = ~avg_medicare, \n                 z = ~avg_patient_owed,hoverinfo = 'text',text=~paste('Category: ',Category,'</br> State: ',ProviderState ,'</br> Average Insurance Cost: ',avg_insurance,'</br> Average Medicare Coverage: ',avg_medicare,'</br> Average Patient Owed: ',avg_patient_owed),color = ~Category \n    )%>%\n      add_markers() %>%\n      layout(scene = list(xaxis = list(title = 'Average Insurance'),\n                          yaxis = list(title = 'Average Medicare'),\n                          zaxis = list(title = 'Average Patient Owed')))\n    \n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n##Treatment Cost\n\n```{r, echo=FALSE,message=FALSE}\nui <- fluidPage(\n  # Application title\n  sidebarLayout(\n    sidebarPanel(\n      radioButtons(\"Category\", \"Select Category\", \n                  choices=c(\"Ears,Nose,Throat\",\t\"Endocrine\",\t\"Gastrointestinal\",\t\"Heart\",\t\"Infections\",\t\"Lung\",\t\"Nerve\",\t\"Orthopedic\",\t\"Other\",\t\"Poisoning\",\t\"Psychiatric\",\t\"Renal\",\t\"Skin\",\t\"Vascular\"\n                  ),\n                  selected=\"Heart\" \n                  ), \n      ratingInput(\"rating1\", label=\"Select Hospital Rating\",value=1),\n      width=4\n       ),\n    \n    # Show a plot of the generated distribution\n    mainPanel(tabsetPanel(\n      tabPanel(\"Map\",\n               leafletOutput('myMap')),\n      tabPanel(\"Most Affordable Hospitals\",\n               DT::dataTableOutput(\"table\"))\n    )\n    )\n  )\n)\n\n\n\n\nserver <- function(input, output,session) {\n  catreact<-reactive({input$Category})\n  ratingreact<-reactive({input$rating1})\n  \n  output$myMap <- renderLeaflet(\n    test<-AverageCategory%>%\n      filter(Category==catreact(), Rating >= ratingreact())%>%\n      group_by(Category)%>%\n      mutate(rank=row_number(),CostofTreatment=sprintf(\"$%s\",format(AverageCost,big.mark=\",\",digits=2,scientific=FALSE)))%>%\n      mutate(X=paste0('<strong>Provider Name: </strong>', \n                      ProviderName,\n                      '<br><strong>Address</strong>: ',\n                      ProviderStreetAddress,\n                      '<br><strong>City</strong>: ',\n                      ProviderCity,\n                      '<br><strong>Average Treatment Cost</strong>: ',\n                      CostofTreatment,\n                      '<br><strong>National Treatment Cost Rank</strong>: ',\n                      rank,\n                      '<br><strong>Overall Hospital Rating</strong>: ',\n                      Rating\n      ))%>%\n      leaflet()%>%\n      addProviderTiles(\"Esri.NatGeoWorldMap\")%>%\n      setView(-110, 45, zoom = 3)%>%\n      addMarkers(lng=~longitude, lat=~latitude,popup=~as.character(X),clusterOptions = markerClusterOptions())%>%\n      mapOptions(zoomToLimits = \"first\")\n  )\n  \n  output$table <- DT::renderDataTable(DT::datatable({\n    data <-     AverageCategory%>%\n      filter(Category==catreact(), Rating >= ratingreact())%>%\n      top_n(n=10,wt=AverageCost)%>%\n      mutate(CostofTreatment=sprintf(\"$%s\",format(AverageCost,big.mark=\",\",digits=2,scientific=FALSE)),State=Name)\n    \n    \n    data[,c(\"ProviderName\",\"ProviderCity\",\"State\",\"CostofTreatment\",\"Rating\")]\n    \n    \n  }))\n  output$rating <- renderText({paste(input$rating) })\n\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n```\n\n##Cost of Healthcare Compared to Iowa\n\n```{r, echo=FALSE,message=FALSE}\nui <- fluidPage(\n  #titlePanel(\"Healthcare Expenses Compared to Iowa by Category\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      radioButtons(\"Category\", \"Select Category\", \n                  choices=c(\"Ears,Nose,Throat\",\t\"Endocrine\",\t\"Gastrointestinal\",\t\"Heart\",\t\"Infections\",\t\"Lung\",\t\"Nerve\",\t\"Orthopedic\",\t\"Other\",\t\"Poisoning\",\t\"Psychiatric\",\t\"Renal\",\t\"Skin\",\t\"Vascular\"\n                  ),\n                  selected=\"Heart\"\n                  ),width=3\n    ),\n    mainPanel(tabsetPanel(\n      tabPanel(\"% Difference to Iowa\",\n               plotlyOutput(\"plot2\",width=900,height=450\n               )),\n      tabPanel(\"Cost of Living Adjusted % Difference to Iowa\",\n               plotlyOutput(\"plot\",width=900,height=450\n               )))\n    )\n  )\n)  \n\n\nserver <- function(input, output,session) {\noutput$plot <- renderPlotly({\n    states<-map_data(\"state\")\n    \n    \n    catreact<-reactive({input$Category})\n    \n    mapstates %>% \n      filter(Category==catreact())%>%\n      group_by(Category,ProviderState,Mean_Cost_Percentage_Difference_to_Iowa)%>%\n      rename(Compared.to.Iowa=Mean_Cost_Percentage_Difference_to_Iowa)%>%\n      ggplot(aes(x = long, y = lat,group=group)) +   \n      geom_path()+\n      geom_polygon(aes(group = group, fill=Compared.to.Iowa))+\n      expand_limits(x=states$long, y=states$lat)+\n      scale_fill_gradient2(low=\"dark green\",mid=\"white\",high=\"dark red\",name=\"Cost of Living \\n% Compared to Iowa\")+\n      theme(plot.title = element_text(hjust = -0.7))+\n      ggthemes::theme_map()\n    \n  })\n  output$plot2 <- renderPlotly({\n  \n    \n    catreact<-reactive({input$Category})\n    mapstates2 %>% \n      filter(Category==catreact())%>%\n      group_by(Category,ProviderState,Mean_Cost_Percentage_Difference_to_Iowa)%>%\n      rename(Compared.to.Iowa=Mean_Cost_Percentage_Difference_to_Iowa)%>%\n      ggplot(aes(x = long, y = lat,group=group)) +   \n      geom_path()+\n      geom_polygon(aes(group = group, fill=Compared.to.Iowa))+\n      expand_limits(x=states$long, y=states$lat)+\n      scale_fill_gradient2(low=\"dark green\",mid=\"white\",high=\"dark red\",name=\"% Compared to Iowa\")+\n      theme(plot.title = element_text(hjust = -0.7))+\n      ggthemes::theme_map()\n    \n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n##Number of Patients by Category in Iowa\n\n\n```{r, echo=FALSE,message=FALSE}\nui <- fluidPage(\n  \n  \n    \n    mainPanel(\n      HTML(\"Hover over points for information\"),\n      selectInput(\"State\", \"Select States\", \n                  choices=c(\"AK\"\t,\"AL\"\t,\"AR\"\t,\"AZ\"\t,\"CA\"\t,\"CO\"\t,\"CT\"\t,\"DC\"\t,\"DE\"\t,\"FL\"\t,\"GA\"\t,\"HI\"\t,\"IA\"\t,\"ID\"\t,\"IL\"\t,\"IN\"\t,\"KS\"\t,\"KY\"\t,\"LA\"\t,\"MA\"\t,\"MD\"\t,\"ME\"\t,\"MI\"\t,\"MN\"\t,\"MO\"\t,\"MS\"\t,\"MT\"\t,\"NC\"\t,\"ND\"\t,\"NE\"\t,\"NH\"\t,\"NJ\"\t,\"NM\"\t,\"NV\"\t,\"NY\"\t,\"OH\"\t,\"OK\"\t,\"OR\"\t,\"PA\"\t,\"RI\"\t,\"SC\"\t,\"SD\"\t,\"TN\"\t,\"TX\"\t,\"UT\"\t,\"VA\"\t,\"VT\"\t,\"WA\"\t,\"WI\"\t,\"WV\"\t,\"WY\"\n                  ),\n                  selected=\"IA\", \n                  multiple=FALSE),\n       selectInput(\"Category\", \"Select Category\", \n                  choices=c(\"Ears,Nose,Throat\",\t\"Endocrine\",\t\"Gastrointestinal\",\t\"Heart\",\t\"Infections\",\t\"Lung\",\t\"Nerve\",\t\"Orthopedic\",\t\"Other\",\t\"Poisoning\",\t\"Psychiatric\",\t\"Renal\",\t\"Skin\",\t\"Vascular\"\n                  ),\n                  selected=\"Heart\",\n                  multiple=TRUE\n                  ),\n      # this is an extra div used ONLY to create positioned ancestor for tooltip\n      # we don't change its position\n     \n        plotlyOutput(\"scatterplot\"),\n     \n      width = 12\n    )\n  )\n\nserver <- function(input, output,session) {\n\n  \n  output$scatterplot <- renderPlotly({\n    m<-Analysis_Dataset %>%\n      filter(ProviderState==input$State,Category==input$Category)%>%\n      group_by(ProviderState,ProviderName,Category,Procedure) %>%\n      summarize(NumberofPatients = sum(TotalDischarges))\n    \n    gg<-ggplotly(ggplot(m,aes(Procedure,NumberofPatients,label=ProviderName))+\n      geom_point(aes(color=Category)) + \n      ylab(\"# of Patients\")+\n      coord_flip()+\n      guides(color=FALSE))\ngg\n  })\n  \n  \n\n}\nshinyApp(ui = ui, server = server)\n\n```\n\n\n\n",
    "created" : 1480819097374.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2068930215",
    "id" : "F486A054",
    "lastKnownWriteTime" : 1481232764,
    "last_content_update" : 1481232764382,
    "path" : "C:/Users/Travis/Desktop/Final Project/Final Shiny.Rmd",
    "project_path" : "Final Shiny.Rmd",
    "properties" : {
        "last_setup_crc32" : "",
        "tempName" : "Untitled2"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}